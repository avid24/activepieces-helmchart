# Default values for activepieces.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: activepieces/activepieces
  tag: 0.8.0
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
initialDelaySeconds: 3  # Delay before the first probe
periodSeconds: 2          # How often to run the probe
failureThreshold: 1       # Number of failures to trigger a restart. Fail fast.

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80
  targetPort: 8080  # Mapping Docker's 8080 to Kubernetes 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 1
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# Environment variables from .env file
environment:
env:
  - name: AP_ENGINE_EXECUTABLE_PATH
    value: "dist/packages/engine/main.js"
  - name: AP_ENCRYPTION_KEY
    value: "8dbe2c426839b180bea15b4dc0b43c3c"
    # valueFrom:
    #   secretKeyRef:
    #     name: activepieces
    #     key: AP_ENCRYPTION_KEY
  - name: AP_JWT_SECRET
    value: "YOUWANTTOCHANGETHIS"
  - name: AP_ENVIRONMENT
    value: "prod"
  - name: AP_FRONTEND_URL
    value: "http://localhost:8080"
  - name: AP_TRIGGER_DEFAULT_POLL_INTERVAL
    value: "5"
  - name: AP_POSTGRES_DATABASE
    value: "activepieces"
  - name: AP_POSTGRES_HOST
    value: "activepieces-postgresql.default.svc.cluster.local"
  - name: AP_POSTGRES_PORT
    value: "5432"
  - name: AP_POSTGRES_USERNAME
    value: "postgres"
  - name: AP_POSTGRES_PASSWORD
    value: "postgres"
    # valueFrom:
    #   secretKeyRef:
    #     name: activepieces
    #     key: AP_POSTGRES_PASSWORD
  - name: AP_EXECUTION_MODE
    value: "UNSANDBOXED"
  - name: AP_REDIS_HOST
    value: "activepieces-redis-master.default.svc.cluster.local"
  - name: AP_REDIS_PORT
    value: "6379"
  - name: AP_SANDBOX_RUN_TIME_SECONDS
    value: "600"
  - name: AP_TELEMETRY_ENABLED
    value: "true"
  - name: AP_TEMPLATES_SOURCE_URL
    value: "https://cloud.activepieces.com/api/v1/flow-templates"


# Redis settings
redis:
  enabled: true
  replica:
    replicaCount: 0
  auth:
    enabled: false

# PostgreSQL settings
postgresql:
  enabled: true
  auth:
    username: postgres
    password: "postgres"
    # password: ""
    # passwordSecret:
    #   name: activepieces
    #   key: AP_POSTGRES_PASSWORD
  persistence:
    enabled: true
    size: 500M
    # storageClass: standard
    accessModes:
      - ReadWriteOnce
  primary:
    initdb:
      user: postgres
      password: "postgres"
      scripts:
        create-activepieces-db.sh: |
          #!/bin/bash
          echo "Creating 'activepieces' database..."
          export PGPASSWORD="$POSTGRES_INITSCRIPTS_PASSWORD" PGUSER="$POSTGRES_INITSCRIPTS_USERNAME" 
          psql -d postgres -c "CREATE DATABASE activepieces;"


  
